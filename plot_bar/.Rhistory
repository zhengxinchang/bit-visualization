shiny::runApp('E:/project/git_repo/aml_database_analysis_shinyapp/v2')
library(survminer)
library(survminer)
library(survival)
library(cmprsk)
setwd("E:/projects/git_repo/aml_database_analysis_shinyapp/competing_risk_analysis")
bmt$status <- factor(bmt$status ,levels = c(0,1,2),labels = c("Censored","Motality","Relapse"))
summary(bmt)
bmt <- read.csv("./bmt.csv",sep=";")
bmt$dis <- factor(bmt$dis , levels = c(0,1),labels = c("ALL","AML"))
bmt$status <- factor(bmt$status ,levels = c(0,1,2),labels = c("Censored","Motality","Relapse"))
summary(bmt)
addmargins(xtabs(data = bmt, ~ dis + status)) %>% htmlTable::htmlTable()
resEfsByDis <- survfit(
formula = Surv(ftime,status!="Censored") ~dis,
data = bmt,
type = "kaplan-meier",
error = "greenwood",
conf.type= "log-log"
)
summary(resEfsByDis)
## Calculate the grouped cumulative incidence functions (CIF)
resCumIncByDis <- cuminc(ftime   = bmt$ftime,  # failure time variable
fstatus = bmt$status,  # variable with distinct codes for different causes of failure
group   = bmt$dis,  # estimates will calculated within groups
## strata  = ,  # Tests will be stratified on this variable.
rho     = 0, # Power of the weight function used in the tests.
cencode = "Censored", # value of fstatus variable which indicates the failure time is censored.
## subset = ,
## na.action = na.omit
)
## CIF and the variance of point estimates
a<-timepoints(resCumIncByDis, times = c(0,5,10,15,20,30,40,50,60))
resCumIncByDis$Tests
a$est %>%htmlTable::htmlTable()
a$var %>%htmlTable::htmlTable()
# competingRisk <- ggsurvplot(resCumIncByDis,data=bmt,
#                       pval = "pval = 0.12", conf.int = TRUE,
#                       risk.table = TRUE, # Add risk table
#                       risk.table.col = "strata", # Change risk table color by groups
#                       linetype = "strata", # Change line type by groups
#                       surv.median.line = "hv", # Specify median survival
#                       ggtheme = theme_bw(), # Change ggplot2 theme
#                       palette = "jco",fun="event",
#                       legend.title="Cumulative Incidence of Relapse",
#                       legend.labs=c("AML","ALL"))
(        competingRisk <-ggcompetingrisks(
resCumIncByDis,
gnames = NULL,
gsep = " ",
multiple_panels = F,
ggtheme = theme_bw(),
pval = "xdf",
conf.int = F,
surv.median.line = "hv", # Specify median survival
palette = "jco",
legend.title=list(color="Event",linetype="Group")
)
)
rbind(c("", "Column spanners", NA),
c("", "Cgroup 1", "Cgroup 2"))
## Calculate the grouped cumulative incidence functions (CIF)
resCumIncByDis <- cuminc(ftime   = bmt$ftime,  # failure time variable
fstatus = bmt$status,  # variable with distinct codes for different causes of failure
group   = bmt$dis,  # estimates will calculated within groups
## strata  = ,  # Tests will be stratified on this variable.
rho     = 0, # Power of the weight function used in the tests.
#cencode = "Censored", # value of fstatus variable which indicates the failure time is censored.
## subset = ,
## na.action = na.omit
)
# competingRisk <- ggsurvplot(resCumIncByDis,data=bmt,
#                       pval = "pval = 0.12", conf.int = TRUE,
#                       risk.table = TRUE, # Add risk table
#                       risk.table.col = "strata", # Change risk table color by groups
#                       linetype = "strata", # Change line type by groups
#                       surv.median.line = "hv", # Specify median survival
#                       ggtheme = theme_bw(), # Change ggplot2 theme
#                       palette = "jco",fun="event",
#                       legend.title="Cumulative Incidence of Relapse",
#                       legend.labs=c("AML","ALL"))
(        competingRisk <-ggcompetingrisks(
resCumIncByDis,
gnames = NULL,
gsep = " ",
multiple_panels = F,
ggtheme = theme_bw(),
pval = "xdf",
conf.int = F,
surv.median.line = "hv", # Specify median survival
palette = "jco",
legend.title=list(color="Event",linetype="Group")
)
)
bmt
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
install.packages("oxygen2")
install.packages("roxygen2")
install.packages("devtools")
plot(1:20,col="red")
title(sub="aa")
setwd("E:/projects/NGDC/BioCloud/remote_sync_dirs/plot_bar")
source("../common/common_header.r")
source("../common/common_header.r")
source("../common/common_header.r")
a=data.frame(letter=letters[1:5],count1=sample(1:100,5,repalce=T))
a=data.frame(letter=letters[1:5],count1=sample(1:100,5,replace=T))
a
a=data.frame(letter=letters[1:5],count1=sample(1:100,5,replace=T),count2=sample(1:100,5,replace=T),count3=sample(1:100,5,replace=T))
q
a
a %>% tidyr::gather(key=letter)
a %>% tidyr::gather(key=letter,-letter)
a=data.frame(letter=sample(letters[1:5],20,replace=T),count1=sample(1:100,20,replace=T))
a
a=data.frame(letter=sample(letters[1:5],20,replace=T),count=sample(1:100,20,replace=T))
write.csv(a,"example_box.txt",sep = "\t",quote = F,row.names = F)
write.csv(a,"example_box.txt",quote = F,row.names = F)
q()
