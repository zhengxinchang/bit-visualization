rm(marker)
rm(findmarker_results.sig_pos)
rm(enrichReactome_pos)
rm(enrichkegg_pos)
rm(findmarker_results.sig_neg)
rm(enrichReactome_neg)
rm(enrichkegg_neg)
}
saveWorkbook(wb, paste("Monocyte_clusters_enrich", ".xlsx", sep = ""), overwrite = TRUE)
Idents(MonocyteSubData)<-MonocyteSubData$integrated_snn_res.0.2
cluster_list<-MonocyteSubData$integrated_snn_res.0.2 %>%unique()
pval <- 0.1
logfc <- 0
wb <- createWorkbook()
for (cluster in cluster_list){
print(cluster)
addWorksheet(wb, cluster)
ifnext<-FALSE
tryCatch({
print("run findmarkers")
marker <- FindMarkers(MonocyteSubData, ident.1 = "osteoporosis", group.by = "group2",ident.2 = "Normal",subset.ident = cluster)
},error=function(e){
ifnext <<- TRUE
},warning = function(e){
ifnext <<- TRUE
})
print(ifnext)
if (ifnext){next}
print("run following cmds")
findmarker_results.sig_pos <- marker  %>% filter(p_val <= pval, avg_logFC >= logfc)
findmarker_results.sig_neg <- marker %>% filter(p_val <= pval, avg_logFC < -logfc)
marker_symbol_pos<-bitr(geneID = rownames(findmarker_results.sig_pos),
fromType = "ENSEMBL", toType = "SYMBOL", OrgDb = "org.Hs.eg.db")
marker_symbol_neg<-bitr(geneID = rownames(findmarker_results.sig_neg),
fromType = "ENSEMBL", toType = "SYMBOL", OrgDb = "org.Hs.eg.db")
findmarker_results.sig_pos<-  findmarker_results.sig_pos  %>% rownames_to_column("ENSEMBL") %>% left_join(marker_symbol_pos,by = "ENSEMBL")
findmarker_results.sig_neg<-  findmarker_results.sig_neg  %>% rownames_to_column("ENSEMBL") %>% left_join(marker_symbol_neg,by = "ENSEMBL")
entrizID_pos <- bitr(geneID =findmarker_results.sig_pos$ENSEMBL ,fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")
enrichReactome_pos<- enrichPathway(entrizID_pos$ENTREZID)
enrichkegg_pos <- enrichKEGG(gene = entrizID_pos$ENTREZID,organism = "hsa", pvalueCutoff = 0.05)
entrizID_neg <- bitr(geneID =findmarker_results.sig_neg$ENSEMBL ,fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")
enrichReactome_neg<- enrichPathway(entrizID_neg$ENTREZID)
enrichkegg_neg <- enrichKEGG(gene = entrizID_neg$ENTREZID,organism = "hsa", pvalueCutoff = 0.05)
#write to excel
col_start <-1
# up genes
writeData(wb, sheet = cluster, "Up regulated Genes", startRow = 1, startCol = col_start, borders = "surrounding")
writeData(wb, sheet = cluster, findmarker_results.sig_pos, startRow = 2, startCol = col_start, borders = "surrounding")
col_start <- col_start + ncol(findmarker_results.sig_pos) + 2
# up gene reactome enrich
writeData(wb, sheet = cluster, "Up gene Reactome enrich results", startRow = 1, startCol = col_start, borders = "surrounding")
writeData(wb, sheet = cluster, enrichReactome_pos, startRow = 2, startCol = col_start, borders = "surrounding")
col_start <- col_start + ncol(enrichReactome_pos) + 2
# up gene kegg enrich
writeData(wb, sheet = cluster, "Up gene Kegg enrich results", startRow = 1, startCol = col_start, borders = "surrounding")
writeData(wb, sheet = cluster, enrichkegg_pos, startRow = 2, startCol = col_start, borders = "surrounding")
col_start <- col_start + ncol(enrichkegg_pos) + 2
# down genes
writeData(wb, sheet = cluster, "down regulated Genes", startRow = 1, startCol = col_start, borders = "surrounding")
writeData(wb, sheet = cluster, findmarker_results.sig_neg, startRow = 2, startCol = col_start, borders = "surrounding")
col_start <- col_start + ncol(findmarker_results.sig_neg) + 2
# down gene reactome enrich
writeData(wb, sheet = cluster, "down gene Reactome enrich results", startRow = 1, startCol = col_start, borders = "surrounding")
writeData(wb, sheet = cluster, enrichReactome_neg, startRow = 2, startCol = col_start, borders = "surrounding")
col_start <- col_start + ncol(enrichReactome_neg) + 2
# down gene kegg enrich
writeData(wb, sheet = cluster, "dwon gene Kegg enrich results", startRow = 1, startCol = col_start, borders = "surrounding")
writeData(wb, sheet = cluster, enrichkegg_neg, startRow = 2, startCol = col_start, borders = "surrounding")
col_start <- col_start + ncol(enrichkegg_neg) + 2
rm(marker)
rm(findmarker_results.sig_pos)
rm(enrichReactome_pos)
rm(enrichkegg_pos)
rm(findmarker_results.sig_neg)
rm(enrichReactome_neg)
rm(enrichkegg_neg)
}
saveWorkbook(wb, paste("Monocyte_clusters_enrich", ".xlsx", sep = ""), overwrite = TRUE)
BiocManager::install("YK Ma:
不用不用，就试一下STRINGdb吧
")
BiocManager::install("STRINGdb")
library(STRINGdb)
string_db <- STRINGdb$new( version="11", species=9606,
score_threshold=400, input_directory="")
stringIdForI <- string_db$mp("EGFR")
neighbors <- string_db$get_neighbors(stringIdForI)
enrichment <- string_db$get_enrichment(neighbors)
heand(enrichment)
head(enrichment)
mini<-head(enrichment)
View(mini)
stringIdForI <- string_db$mp("TP53")
neighbors <- string_db$get_neighbors(stringIdForI)
enrichment <- string_db$get_enrichment(neighbors)
mini<-head(enrichment)
?enrichment
enrichment
saveRDS(enrichment,"enrichment.rds")
library(maftools)
print("aaa")
library(scatterplot3d)
print("aaa")
source('D:/knowledgedb_download/vcfsummary/MutSigRun.r', echo=TRUE)
# makePie(plot_example)
similarity <-as.data.frame(t(plot_example$weights))
print("aaa")
a="NULL"
a =="NULL"
setwd("E:/projects/git_repo/biocloud_code")
install.packages("optparse")
install.packages("argparse")
library(argparse)
parser <- ArgumentParser(description='Process some integers')
parser <- ArgumentParser(description='Process some integers')
library(argparse)
library(ggplot)
library(ggplot2)
dat<-read.table("./units/plot_bar/example_input_bar_2.txt",header = T)
datname<- names(dat
)
datname[1]
dat[[datname[1]]]
.libPaths()
dirname("a/b/c/d.e")
as.numeric("NULL")
colorRampPalette(ggsci::pal_npg()(10))
palette_list_generation_function=list(
"npg"= colorRampPalette(ggsci::pal_npg()(10)),
"aaas"= colorRampPalette(ggsci::pal_aaas()(10)),
"nejm"= colorRampPalette(ggsci::pal_nejm()(8)),
"lancet"= colorRampPalette(ggsci::pal_lancet()(9)),
"jama"= colorRampPalette(ggsci::pal_jama()(7)),
"jco"= colorRampPalette(ggsci::pal_jco()(10)),
"ucscgb"= colorRampPalette(ggsci::pal_aaas()(10)),
"d3"= colorRampPalette(ggsci::pal_d3()(10)),
"locuszoom"= colorRampPalette(ggsci::pal_locuszoom()(7)),
"igv"= colorRampPalette(ggsci::pal_igv()(51)),
"uchicago"= colorRampPalette(ggsci::pal_aaas()(9)),
"startrek"= colorRampPalette(ggsci::pal_startrek()(7)),
"tron"= colorRampPalette(ggsci::pal_tron()(7)),
"futurama"= colorRampPalette(ggsci::pal_futurama()(12)),
"rickandmorty"= colorRampPalette(ggsci::pal_rickandmorty()(12)),
"simpsons"= colorRampPalette(ggsci::pal_simpsons()(16))
)
palette_list_generation_function[["aaas"]]
palette_list_generation_function[["aaas"]](100)
colorRampPalette(c("navy", "white", "firebrick3"))(50)
setwd("./units/plot_heatmap/")
dat <- read.table("./input_heatmap.txt",header = T,stringsAsFactors = F)
pheatmap::pheatmap(dat
)
pheatmap::pheatmap(dat)
pheatmap()
library(pheatmap)
a = list(mat=dat)
pheatmap(a)
warpheatmap<-function(...){
pheatmap::pheatmap(...)
}
warpheatmap(dat)
do.call(pheatmap,list(mat=dat))
do.call(pheatmap,list(mat=dat,clustering_method = "average"))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=2
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=100
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
))
dim(dat
)
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=20
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=11
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=20
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=11
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=19
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=4
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="red"
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="red"
,display_numbers=TRUE
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
))
opt_parser = OptionParser(option_list=option_list)
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
,color = palette_list_generation_function[['npg']](20)
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
,color = palette_list_generation_function[['aaas']](20)
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
,color = palette_list_generation_function[['aaas']](2)
))
colorRampPalette(colors = c("red","yellow","white"))
colorRampPalette(colors = c("red","yellow","white"))(30)
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
,color = colorRampPalette(colors = c("red","yellow","white"))(30)
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
,color = colorRampPalette(colors = c("darkred","yellow","white"))(30)
))
do.call(pheatmap,list(mat=dat
,clustering_method = "average"
,clustering_distance_rows = "correlation"
,cluster_row = FALSE
,cluster_col = FALSE
,scale = "none"
,kmeans_k=10
,number_color="black"
,display_numbers=TRUE
,color = colorRampPalette(colors = c("darkred","yellow","blue"))(30)
))
myconvert <-function(s){
if(class(s)=="character"){
if(s=="NA"){
return(NA)
}else if(s=="NULL"){
return(NULL)
}else if(s == "TRUE"){
return(TRUE)
}else if(s=="FALSE"){
return(FALSE)
}
else{
return(s)
}
}else{
return(s)
}
}
myconvert("FALSE")
myconvert("TRUE")
myconvert("NA")
myconvert("NULL")
paramlist = list()
paramlist[["mat"]] = dat
paramlist
do.call(pheatmap,paramlist)
addpram <- function(obj,targetname,paraname=targetname){
if (opt[[paraname]] != "NULL"){
obj[[targetname]] <- obj[[paraname]]
}
return(obj)
}
myconvert <-function(s){
if(class(s)=="character"){
if(s=="NA"){
return(NA)
}else if(s=="NULL"){
return(NULL)
}else if(s == "TRUE"){
return(TRUE)
}else if(s=="FALSE"){
return(FALSE)
}else{
tryCatch(
{
a = as.numeric(s)
return(a)
}
,error=function(){
return(s)
}
)
}
}else{
return(s)
}
}
myconvert("1.2")
myconvert("1x")
as.numeric("1.2")
as.numeric("1.2") ->m
is.na(m)
as.numeric("1.x") ->m
is.na(m)
as.numeric("1.2") ->m
is.numeric(m)
as.numeric("1.x") ->m
is.numeric(m)
m
is.numeric(m)
as.numeric("FALSE") ->m
is.numeric(m)
is.na(m)
myconvert <-function(s){
if(class(s)=="character"){
if(s=="NA"){
return(NA)
}else if(s=="NULL"){
return(NULL)
}else if(s == "TRUE"){
return(TRUE)
}else if(s=="FALSE"){
return(FALSE)
}else{
tryCatch(
{
a = as.numeric(s)
if(is.na(a)){
return(s)
}else{
return(a)
}
}
,error=function(){
return(s)
}
)
}
}else{
return(s)
}
}
myconvert("1.x")
a =myconvert("1.x")
a
a =myconvert("1")
a
199
a =myconvert("199")
a
a =myconvert("FALSE")
a
a =myconvert("NA")
a
colorRampPalette(c("red","green","yellow"))(12)
